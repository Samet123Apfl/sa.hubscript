loadstring(game:HttpGet('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source'))()





-- SA.HUB Script
-- Professional Edition v2.0

-- Configuration
local CONFIG = {
    COLORS = {
        BACKGROUND = Color3.fromRGB(25, 25, 25),
        PRIMARY = Color3.fromRGB(40, 40, 40),
        SECONDARY = Color3.fromRGB(30, 30, 30),
        TEXT = Color3.fromRGB(255, 255, 255),
        ACCENT = Color3.fromRGB(70, 130, 255),
        CLOSE = Color3.fromRGB(255, 70, 70)
    },
    GUI = {
        FLOAT_SIZE = Vector2.new(150, 70),
        COMMANDS_SIZE = Vector2.new(300, 400),
        COMMANDBAR_SIZE = Vector2.new(400, 50),
        TITLE_HEIGHT = 40,
        BUTTON_HEIGHT = 40
    },
    FLOAT = {
        PLATFORM_SIZE = Vector3.new(1000, 1, 1000),
        HEIGHT_CHANGE = 1,
        INITIAL_OFFSET = -3
    },
     KEYBIND = Enum.KeyCode.L
}

-- Services
local Services = {
    Players = game:GetService("Players"),
    TweenService = game:GetService("TweenService"),
    CoreGui = game:GetService("CoreGui"),
    VoiceChatService = game:GetService("VoiceChatService"),
    UserInputService = game:GetService("UserInputService"),
    RunService = game:GetService("RunService"),
    HttpService = game:GetService("HttpService"),
    TextChatService = game:GetService("TextChatService"),
    ReplicatedStorage = game:GetService("ReplicatedStorage")
}

-- Utility Functions
local Utility = {}

function Utility.CreateInstance(className, properties)
    local instance = Instance.new(className)
    for prop, value in pairs(properties) do
        instance[prop] = value
    end
    return instance
end

function Utility.Tween(instance, properties, duration)
    local tween = Services.TweenService:Create(
        instance,
        TweenInfo.new(duration, Enum.EasingStyle.Quad),
        properties
    )
    tween:Play()
    return tween
end

-- Main GUI Class
local SAHUB = {
    Player = Services.Players.LocalPlayer,
    Screen = nil,
    FloatPart = nil,
    FloatGui = nil,
    CommandsGui = nil,
    CommandBarGui = nil,
    CommandBarInput = nil,
    CurrentHeight = 0,
    Connections = {},
    BangGui = nil,
    BangActive = false,
    TargetPlayer = nil,
    TargetName = nil,
}

function SAHUB:Init()
    self.Screen = Utility.CreateInstance("ScreenGui", {
        Name = "SA.HUB",
        ResetOnSpawn = false,
        Parent = Services.CoreGui
    })
    
    self:CreateIntro()
    self:CreateCommandsGui()
    self:SetupChatCommands()
    self:SetupKeybind()
end

function SAHUB:CreateIntro()
    local intro = Utility.CreateInstance("Frame", {
        Name = "Intro",
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundColor3 = CONFIG.COLORS.BACKGROUND,
        Parent = self.Screen
    })
    
    local logo = Utility.CreateInstance("TextLabel", {
        Name = "Logo",
        Size = UDim2.new(0, 300, 0, 100),
        Position = UDim2.new(0.5, -150, 0.5, -50),
        BackgroundTransparency = 1,
        TextColor3 = CONFIG.COLORS.TEXT,
        TextSize = 48,
        Font = Enum.Font.GothamBold,
        Text = "SA.HUB",
        TextTransparency = 1,
        Parent = intro
    })
    
     local keybindLabel = Utility.CreateInstance("TextLabel", {
        Name = "KeybindLabel",
        Size = UDim2.new(0, 300, 0, 30),
        Position = UDim2.new(0.5, -150, 0.5, 50),
        BackgroundTransparency = 1,
        TextColor3 = CONFIG.COLORS.TEXT,
        TextSize = 14,
        Font = Enum.Font.Gotham,
        Text = "(Press L to activate cmds)",
         TextTransparency = 1,
        Parent = intro
    })
    
    -- Animate intro
    Utility.Tween(logo, {TextTransparency = 0}, 1)
    Utility.Tween(keybindLabel, {TextTransparency = 0}, 1)
    task.wait(2)
    Utility.Tween(intro, {BackgroundTransparency = 1}, 0.5).Completed:Wait()
    intro:Destroy()
end

function SAHUB:CreateFloatGui()
    if self.FloatGui then return end
    
    self.FloatGui = Utility.CreateInstance("Frame", {
        Name = "FloatGui",
        Size = UDim2.new(0, CONFIG.GUI.FLOAT_SIZE.X, 0, CONFIG.GUI.FLOAT_SIZE.Y),
        Position = UDim2.new(1, -170, 1, -90),
        BackgroundColor3 = CONFIG.COLORS.SECONDARY,
        BorderSizePixel = 0,
        Parent = self.Screen
    })
    
    -- Add float controls and height display
    local title = Utility.CreateInstance("TextLabel", {
        Size = UDim2.new(1, 0, 0, 30),
        BackgroundColor3 = CONFIG.COLORS.PRIMARY,
        TextColor3 = CONFIG.COLORS.TEXT,
        TextSize = 14,
        Font = Enum.Font.GothamBold,
        Text = "Float Control",
        Parent = self.FloatGui
    })
    
    local heightLabel = Utility.CreateInstance("TextLabel", {
        Name = "HeightLabel",
        Size = UDim2.new(1, 0, 0, 30),
        Position = UDim2.new(0, 0, 0.5, 0),
        BackgroundTransparency = 1,
        TextColor3 = CONFIG.COLORS.TEXT,
        TextSize = 14,
        Font = Enum.Font.Gotham,
        Text = "Height: 0",
        Parent = self.FloatGui
    })
    
    return heightLabel
end

function SAHUB:CreateCommandsGui()
    self.CommandsGui = Utility.CreateInstance("Frame", {
        Name = "CommandsGui",
        Size = UDim2.new(0, CONFIG.GUI.COMMANDS_SIZE.X, 0, CONFIG.GUI.COMMANDS_SIZE.Y),
        Position = UDim2.new(0.5, -150, 0.5, -200),
        BackgroundColor3 = CONFIG.COLORS.SECONDARY,
        BorderSizePixel = 0,
        Visible = false,
        Parent = self.Screen
    })
    
    -- Add draggable title bar and close button
    self:CreateTitleBar(self.CommandsGui, "SA.HUB Commands")
    self:CreateCommandsList()
end

function SAHUB:CreateTitleBar(gui, titleText)
    local titleBar = Utility.CreateInstance("Frame", {
        Name = "TitleBar",
        Size = UDim2.new(1, 0, 0, CONFIG.GUI.TITLE_HEIGHT),
        BackgroundColor3 = CONFIG.COLORS.PRIMARY,
        Parent = gui
    })
    
    Utility.CreateInstance("TextLabel", {
        Size = UDim2.new(1, -40, 1, 0),
        BackgroundTransparency = 1,
        TextColor3 = CONFIG.COLORS.TEXT,
        TextSize = 20,
        Font = Enum.Font.GothamBold,
        Text = titleText,
        Parent = titleBar
    })
    
    local closeButton = Utility.CreateInstance("TextButton", {
        Size = UDim2.new(0, 40, 1, 0),
        Position = UDim2.new(1, -40, 0, 0),
        BackgroundColor3 = CONFIG.COLORS.CLOSE,
        TextColor3 = CONFIG.COLORS.TEXT,
        TextSize = 20,
        Font = Enum.Font.GothamBold,
        Text = "X",
        Parent = titleBar
    })
    
    -- Make GUI draggable
    local dragging, dragInput, dragStart, startPos
    
    titleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = gui.Position
        end
    end)
    
    titleBar.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)
    
    Services.UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            local delta = input.Position - dragStart
            gui.Position = UDim2.new(
                startPos.X.Scale,
                startPos.X.Offset + delta.X,
                startPos.Y.Scale,
                startPos.Y.Offset + delta.Y
            )
        end
    end)
    
    Services.UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    
    closeButton.MouseButton1Click:Connect(function()
        gui.Visible = false
    end)
end

function SAHUB:CreateCommandsList()
    local commandsList = Utility.CreateInstance("ScrollingFrame", {
        Size = UDim2.new(1, -20, 1, -60),
        Position = UDim2.new(0, 10, 0, 50),
        BackgroundTransparency = 1,
        ScrollBarThickness = 4,
        Parent = self.CommandsGui
    })
    
     local layout = Utility.CreateInstance("UIListLayout", {
        Padding = UDim.new(0, 5),
        Parent = commandsList
    })
    
    -- Command buttons
     for cmd, func in pairs(self.Commands) do
        if cmd == "!tp" then
           local buttonFrame =  Utility.CreateInstance("Frame",{
               Size = UDim2.new(1,0,0,CONFIG.GUI.BUTTON_HEIGHT),
               BackgroundTransparency = 1,
               Parent = commandsList,
           })
           
            local button = Utility.CreateInstance("TextButton", {
                Size = UDim2.new(0.4, 0, 1, 0),
                BackgroundColor3 = CONFIG.COLORS.PRIMARY,
                TextColor3 = CONFIG.COLORS.TEXT,
                TextSize = 16,
                Font = Enum.Font.Gotham,
                Text = cmd,
                Parent = buttonFrame
            })

            local input = Utility.CreateInstance("TextBox", {
                Size = UDim2.new(0.6,-10,1,0),
                Position = UDim2.new(0.4,10,0,0),
                BackgroundColor3 = CONFIG.COLORS.PRIMARY,
                TextColor3 = CONFIG.COLORS.TEXT,
                TextSize = 14,
                Font = Enum.Font.Gotham,
                Text = "Name",
                ClearTextOnFocus = true,
                Parent = buttonFrame
                
            })

            button.MouseButton1Click:Connect(function()
               self:TeleportToPlayer(input.Text)
             end)

          input.Focused:Connect(function()
               input.Text = ""
          end)
        else
              local button = Utility.CreateInstance("TextButton", {
                  Size = UDim2.new(1, 0, 0, CONFIG.GUI.BUTTON_HEIGHT),
                BackgroundColor3 = CONFIG.COLORS.PRIMARY,
                TextColor3 = CONFIG.COLORS.TEXT,
                TextSize = 16,
                Font = Enum.Font.Gotham,
                Text = cmd,
                Parent = commandsList
            })
            
            button.MouseButton1Click:Connect(function()
                self:ExecuteCommand(cmd)
            end)
        end
    end
end

function SAHUB:ExecuteCommand(command)
    local commandParts = string.split(command, " ")
    local cmdName = commandParts[1]

    if self.Commands[cmdName] then
        local args = {}
        for i = 2, #commandParts do
            table.insert(args, commandParts[i])
        end
        self.Commands[cmdName](unpack(args))
     elseif cmdName == "!tp" and #commandParts >= 2 then
         self:TeleportToPlayer(commandParts[2])
    elseif cmdName == "!target" and #commandParts >= 2 then
         self:SetTargetPlayer(commandParts[2])
    end
end

function SAHUB:CreateBangGui()
  if self.BangGui then return end

    self.BangGui = Utility.CreateInstance("Frame",{
        Name = "BangGui",
        Size = UDim2.new(0,200,0,100),
        Position = UDim2.new(0.5,-100,0.2, -50),
        BackgroundColor3 = CONFIG.COLORS.SECONDARY,
        BorderSizePixel = 0,
        Visible = false,
        Parent = self.Screen
    })

    self:CreateTitleBar(self.BangGui, "Bang Toggle")

    local toggleButton = Utility.CreateInstance("TextButton",{
          Size = UDim2.new(1,-20,0.4,-10),
          Position = UDim2.new(0, 10, 0.3,10),
          BackgroundColor3 = CONFIG.COLORS.ACCENT,
          TextColor3 = CONFIG.COLORS.TEXT,
          TextSize = 16,
          Font = Enum.Font.GothamBold,
          Text = "BANG",
          Parent = self.BangGui
        })

      toggleButton.MouseButton1Click:Connect(function()
          self:ToggleBang()
          if self.BangActive then
            toggleButton.Text = "UNBANG"
            toggleButton.BackgroundColor3 = CONFIG.COLORS.CLOSE
          else
              toggleButton.Text = "BANG"
               toggleButton.BackgroundColor3 = CONFIG.COLORS.ACCENT
          end
     end)
end

function SAHUB:ToggleBang()
  if not self.TargetPlayer then
    local TextChatService = Services.TextChatService
        local function chatMessage(str)
            str = tostring(str)
            if TextChatService.ChatVersion == Enum.ChatVersion.TextChatService then
                TextChatService.TextChannels.RBXGeneral:SendAsync(str)
            else
                Services.ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(str, "All")
            end
        end
           chatMessage("No target selected. Use !target <displayname>")
          self.BangActive = false
    return
  end
    self.BangActive = not self.BangActive

    if self.BangActive then
      self:StartBang()
    else
      self:StopBang()
    end
end

function SAHUB:StartBang()
   if not self.TargetPlayer or not self.TargetPlayer.Character or not self.TargetPlayer.Character:FindFirstChild("HumanoidRootPart") then return end
    
      local targetRootPart = self.TargetPlayer.Character:FindFirstChild("HumanoidRootPart")
   local playerRootPart = self.Player.Character:FindFirstChild("HumanoidRootPart")

    
    local targetPos = targetRootPart.Position
     local playerPos = playerRootPart.Position
    local direction = (targetPos - playerPos).Unit

       local teleportPosition = targetPos - direction * 5 --Teleport 5 studs away from the target
     playerRootPart.CFrame = CFrame.new(teleportPosition, targetPos)
   
    if loadstring then
       loadstring(
    [[
    local args = {"sleep"}
    if game:GetService("Players").LocalPlayer.Name == " ]]..self.Player.Name ..[[ "then
    	for i,v in pairs(args) do
    		if game.CoreGui:FindFirstChild("infYield") then
			    game:GetService("ReplicatedStorage").infYield.Remotes.Call:FireServer(v)
    		end
    	end
      end
    ]]
    )()
    end
   
  self.Connections.BangWalk =  Services.RunService.Heartbeat:Connect(function()
      if not self.BangActive then return end
      
       local targetRootPart = self.TargetPlayer.Character:FindFirstChild("HumanoidRootPart")
        if not targetRootPart then return end
       
      local direction = (targetRootPart.Position - playerRootPart.Position).Unit

          local newPos = targetRootPart.CFrame * CFrame.new(direction * 0.8 )
           playerRootPart.CFrame =  newPos * CFrame.Angles(0,math.pi,0)
          task.wait(0.5)
          local newPos = targetRootPart.CFrame * CFrame.new(direction * 0.8 * -1)
          playerRootPart.CFrame = newPos * CFrame.Angles(0,math.pi,0)
            task.wait(0.5)
      end)
  if loadstring then
       loadstring(
    [[
    local args = {"noanim"}
    if game:GetService("Players").LocalPlayer.Name == " ]]..self.Player.Name ..[[ "then
    	for i,v in pairs(args) do
    		if game.CoreGui:FindFirstChild("infYield") then
			    game:GetService("ReplicatedStorage").infYield.Remotes.Call:FireServer(v)
    		end
    	end
      end
    ]]
    )()
    end
end

function SAHUB:StopBang()
    if self.Connections.BangWalk then
      self.Connections.BangWalk:Disconnect()
        self.Connections.BangWalk = nil
    end
end

function SAHUB:SetTargetPlayer(name)
  local targetPlayer = nil
    local lowerTargetName = name:lower()
    
    for _, player in ipairs(Services.Players:GetPlayers()) do
        if player.DisplayName:lower():sub(1,#lowerTargetName) == lowerTargetName then
             targetPlayer = player
             break
        end
    end

    if targetPlayer then
      self.TargetPlayer = targetPlayer
      self.TargetName = targetPlayer.DisplayName
      local TextChatService = Services.TextChatService
        local function chatMessage(str)
            str = tostring(str)
            if TextChatService.ChatVersion == Enum.ChatVersion.TextChatService then
                TextChatService.TextChannels.RBXGeneral:SendAsync(str)
            else
                Services.ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(str, "All")
            end
        end
          chatMessage("Targeted player: " .. targetPlayer.DisplayName)
    else
      local TextChatService = Services.TextChatService
        local function chatMessage(str)
            str = tostring(str)
            if TextChatService.ChatVersion == Enum.ChatVersion.TextChatService then
                TextChatService.TextChannels.RBXGeneral:SendAsync(str)
            else
                Services.ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(str, "All")
            end
        end
          chatMessage("Target not found.")
      self.TargetPlayer = nil
      self.TargetName = nil
    end
end

-- Command Functions
SAHUB.Commands = {
		["!baseplate"] = function()
       game.Workspace.Baseplate.Size = Vector3.new(2048, 16, 2048)

local Workspace = game:GetService("Workspace");
local Players = game:GetService("Players");
local Player = Players.LocalPlayer
local Terrain = Workspace.Terrain

Terrain:FillBlock(CFrame.new(66, -10, 72.5), Vector3.new(10000, 16, 10000), Enum.Material.Asphalt)
end,
	["!ssj"] = function()
       loadstring(game:HttpGet("https://raw.githubusercontent.com/0Ben1/fe/main/obf_11l7Y131YqJjZ31QmV5L8pI23V02b3191sEg26E75472Wl78Vi8870jRv5txZyL1.lua.txt"))()
	end,
	
    ["!ak"] = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/LOLkeeptrying/AKADMIN/refs/heads/main/Congratslol"))()
		end,
    ["!if"] = function()
        loadstring(game:HttpGet('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source'))()
    end,
    ["!sb"] = function()
        loadstring(game:HttpGet('https://raw.githubusercontent.com/H20CalibreYT/SystemBroken/main/script'))()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/Gi7331/scripts/main/Emote.lua"))()
    end,
    ["!unban"] = function()
        Services.VoiceChatService:joinVoice()
    end,
	   ["!DARKMAP"] = function()
       loadstring(game:HttpGet("https://raw.githubusercontent.com/Samet123Apfl/darkmap/refs/heads/main/dark%20map"))()
	   end,
    ["!vc"] = function()
        Services.VoiceChatService:joinVoice()
    end,
	    ["!Ständer"] = function()
       loadstring(game:HttpGet("https://raw.githubusercontent.com/Samet123Apfl/st-nda/refs/heads/main/ständer"))()
	   end,
	["!Fuck"] = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/Samet123Apfl/siksik/refs/heads/main/siksik"))()
		end,
        	["!Facebang"] = function()
        local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
local targetHead = nil
local targetPlayer = nil

local FOLLOW_DISTANCE = -0.7
local HEIGHT_OFFSET = 0.8
local MOVEMENT_SPEED = 0.25  -- Increased from 0.15
local THRUST_SPEED = 0.2    -- Increased from 0.08
local THRUST_DISTANCE = 1.5  -- Increased from 0.5

getgenv().facefuckactive = false

-- Enhanced function to completely disable all animations
local function disableAllAnimations(character)
    if not character then return end
    
    -- Disable main Animate script
    local animate = character:FindFirstChild("Animate")
    if animate then
        animate.Disabled = true
        
        -- Disable all animation tracks
        for _, child in ipairs(animate:GetChildren()) do
            if child:IsA("StringValue") then
                child.Value = ""
            end
        end
    end
    
    -- Get Humanoid and stop all current animations
    local humanoid = character:FindFirstChild("Humanoid")
    if humanoid then
        -- Stop existing animations
        for _, track in ipairs(humanoid:GetPlayingAnimationTracks()) do
            track:Stop()
            track:Destroy()
        end
        
        -- Disable default animations
        humanoid.PlatformStand = true
        humanoid.AutoRotate = false
        
        -- Force idle animation state
        humanoid:ChangeState(Enum.HumanoidStateType.Physics)
    end
    
    -- Disable individual animation controllers
    for _, child in ipairs(character:GetChildren()) do
        if child:IsA("LocalScript") and child.Name:match("Controller") then
            child.Disabled = true
        end
    end
    
    -- Set gravity to 0 to prevent falling animation
    workspace.Gravity = 0
end

-- Function to restore animations
local function enableAllAnimations(character)
    if not character then return end
    
    local animate = character:FindFirstChild("Animate")
    if animate then
        animate.Disabled = false
    end
    
    local humanoid = character:FindFirstChild("Humanoid")
    if humanoid then
        humanoid.PlatformStand = false
        humanoid.AutoRotate = true
        humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
    end
    
    -- Re-enable animation controllers
    for _, child in ipairs(character:GetChildren()) do
        if child:IsA("LocalScript") and child.Name:match("Controller") then
            child.Disabled = false
        end
    end
    
    workspace.Gravity = 192.2
end

-- Function to track player respawn and handle retargeting
local function setupCharacterTracking()
    LocalPlayer.CharacterAdded:Connect(function(newCharacter)
        Character = newCharacter
        HumanoidRootPart = newCharacter:WaitForChild("HumanoidRootPart")
        
        if getgenv().facefuckactive then
            disableAllAnimations(newCharacter)
            targetHead = findNearestPlayer()
            if targetHead then
                task.spawn(function()
                    faceBang(targetHead)
                end)
            else
                print("No nearby player found!")
            end
        end
    end)
end

-- Function to find the nearest player
local function findNearestPlayer()
    if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("Head") then
        return targetPlayer.Character.Head
    end

    local nearestPlayer = nil
    local shortestDistance = math.huge

    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Humanoid") and player.Character.Humanoid.Health > 0 then
            local head = player.Character:FindFirstChild("Head")
            if head then
                local distance = (HumanoidRootPart.Position - head.Position).Magnitude
                if distance < shortestDistance then
                    shortestDistance = distance
                    nearestPlayer = head
                    targetPlayer = player
                end
            end
        end
    end

    if targetPlayer then
        targetPlayer.CharacterAdded:Connect(function(newCharacter)
            if getgenv().facefuckactive then
                local head = newCharacter:WaitForChild("Head")
                targetHead = head
                faceBang(head)
            end
        end)
    end

    return nearestPlayer
end

-- Continuous animation prevention
local function setupAnimationPrevention()
    RunService.Heartbeat:Connect(function()
        if getgenv().facefuckactive and LocalPlayer.Character then
            local humanoid = LocalPlayer.Character:FindFirstChild("Humanoid")
            if humanoid then
                -- Stop any new animations that might play
                for _, track in ipairs(humanoid:GetPlayingAnimationTracks()) do
                    track:Stop()
                end
                
                -- Maintain physics state
                humanoid.PlatformStand = true
                humanoid:ChangeState(Enum.HumanoidStateType.Physics)
            end
        end
    end)
end

-- Function to lerp between CFrames
local function lerpCFrame(start, target, alpha)
    return start:Lerp(target, alpha)
end

-- Function to move and follow the target
local function faceBang(head)
    local lastUpdate = tick()
    
    while getgenv().facefuckactive do
        if not head or not head:IsDescendantOf(workspace) then
            if targetPlayer and targetPlayer.Character then
                head = targetPlayer.Character:WaitForChild("Head")
                targetHead = head
            else
                print("Target lost! Retargeting...")
                head = findNearestPlayer()
                if not head then
                    print("No nearby player found!")
                    task.wait(1)
                    continue
                end
            end
        end

        disableAllAnimations(LocalPlayer.Character)

        local distanceToTarget = (head.Position - HumanoidRootPart.Position).Magnitude
        local isApproaching = distanceToTarget > 3
        local currentTime = tick()
        local deltaTime = currentTime - lastUpdate
        lastUpdate = currentTime

        if isApproaching then
            local targetCFrame = head.CFrame * CFrame.new(0, HEIGHT_OFFSET, FOLLOW_DISTANCE) * CFrame.Angles(0, math.rad(180), 0)
            HumanoidRootPart.CFrame = lerpCFrame(HumanoidRootPart.CFrame, targetCFrame, MOVEMENT_SPEED)
        else
            -- Thrusting motion using positions
            local positions = {
                head.CFrame * CFrame.new(0, HEIGHT_OFFSET, FOLLOW_DISTANCE) * CFrame.Angles(0, math.rad(180), 0),
                head.CFrame * CFrame.new(0, HEIGHT_OFFSET, FOLLOW_DISTANCE - THRUST_DISTANCE) * CFrame.Angles(0, math.rad(180), 0),
            }
            
            for _, targetPosition in ipairs(positions) do
                if not getgenv().facefuckactive then break end
                
                local startTime = tick()
                while (tick() - startTime) < 0.1 do  -- Reduced from 0.2 for faster movement
                    if not getgenv().facefuckactive then break end
                    HumanoidRootPart.CFrame = lerpCFrame(HumanoidRootPart.CFrame, targetPosition, THRUST_SPEED)
                    RunService.RenderStepped:Wait()
                end
            end
        end
        
        RunService.RenderStepped:Wait()
    end

    enableAllAnimations(LocalPlayer.Character)
end

-- Function to toggle movement
local function toggleMovement()
    if not getgenv().facefuckactive then
        targetPlayer = nil
        targetHead = findNearestPlayer()
        
        if targetHead then
            getgenv().facefuckactive = true
            disableAllAnimations(LocalPlayer.Character)
            task.spawn(function()
                faceBang(targetHead)
            end)
        else
            print("No nearby player found!")
        end
    else
        getgenv().facefuckactive = false
        targetPlayer = nil
        targetHead = nil
        enableAllAnimations(LocalPlayer.Character)
    end
end

-- Function to create a mobile GUI button
local function createMobileGUI()
    if not UserInputService.TouchEnabled then return end
    
    if PlayerGui:FindFirstChild("FaceBangGui") then
        PlayerGui.FaceBangGui:Destroy()
    end

    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "FaceBangGui"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = PlayerGui

    local container = Instance.new("Frame")
    container.Size = UDim2.new(0, 45, 0, 45)
    container.Position = UDim2.new(0.95, -25, 0.1, 0)
    container.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    container.BorderSizePixel = 0
    container.Parent = screenGui

    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0.2, 0)
    corner.Parent = container

    local gradient = Instance.new("UIGradient")
    gradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromRGB(50, 50, 50)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(35, 35, 35))
    })
    gradient.Rotation = 45
    gradient.Parent = container

    local button = Instance.new("TextButton")
    button.Size = UDim2.new(0.8, 0, 0.8, 0)
    button.Position = UDim2.new(0.5, 0, 0.5, 0)
    button.AnchorPoint = Vector2.new(0.5, 0.5)
    button.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    button.TextColor3 = Color3.fromRGB(200, 200, 200)
    button.Text = "F"
    button.TextSize = 16
    button.Font = Enum.Font.GothamBold
    button.BorderSizePixel = 0
    button.Parent = container

    local buttonCorner = Instance.new("UICorner")
    buttonCorner.CornerRadius = UDim.new(0.2, 0)
    buttonCorner.Parent = button

    local status = Instance.new("Frame")
    status.Size = UDim2.new(0, 6, 0, 6)
    status.Position = UDim2.new(1, -4, 0, 4)
    status.BackgroundColor3 = Color3.fromRGB(255, 50, 50)
    status.BorderSizePixel = 0
    status.Parent = container

    local statusCorner = Instance.new("UICorner")
    statusCorner.CornerRadius = UDim.new(1, 0)
    statusCorner.Parent = status

    button.MouseButton1Click:Connect(function()
        toggleMovement()
        status.BackgroundColor3 = getgenv().facefuckactive and Color3.fromRGB(50, 255, 50) or Color3.fromRGB(255, 50, 50)
    end)
end

-- Add keybind for PC users
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed and input.KeyCode == Enum.KeyCode.Z then
        toggleMovement()
        -- Update mobile GUI status if it exists
        local gui = PlayerGui:FindFirstChild("FaceBangGui")
        if gui then
            local status = gui.Frame:FindFirstChild("Frame")
            if status then
                status.BackgroundColor3 = getgenv().facefuckactive and Color3.fromRGB(50, 255, 50) or Color3.fromRGB(255, 50, 50)
            end
        end
    end
end)

-- Initialize everything
setupCharacterTracking()
setupAnimationPrevention()
createMobileGUI()
       
        end,
         	["!walkonair"] = function()
        local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local CoreGui = game:GetService("CoreGui")
local player = Players.LocalPlayer

-- Create the main invisible baseplate with infinite size
local function createBaseplate()
    local baseplate = Instance.new("Part")
    baseplate.Name = "InvisibleBaseplate"
    baseplate.Size = Vector3.new(math.huge, 1, math.huge)
    baseplate.Position = Vector3.new(0, 0, 0)
    baseplate.Transparency = 1
    baseplate.Anchored = true
    baseplate.CanCollide = true
    baseplate.Material = Enum.Material.Neon
    baseplate.Color = Color3.fromRGB(70, 200, 255)
    baseplate.Parent = workspace
    return baseplate
end

local baseplate = createBaseplate()

-- Create a ScreenGui with protection settings
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "AirwalkGui"
screenGui.ResetOnSpawn = false
screenGui.DisplayOrder = 999999
screenGui.IgnoreGuiInset = true
screenGui.Parent = CoreGui

-- Enhanced button creation function with hover effects
local function createButton(parent, text, position, size, shape, initialColor, textColor)
    local button = Instance.new("TextButton")
    button.Size = size
    button.Position = position
    button.Text = text
    button.BackgroundColor3 = initialColor
    button.TextColor3 = textColor
    button.Font = Enum.Font.GothamBlack
    button.TextSize = 18
    button.BorderSizePixel = 0
    button.AutoButtonColor = false
    button.Parent = parent

    -- Add gradient effect
    local gradient = Instance.new("UIGradient")
    gradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, initialColor),
        ColorSequenceKeypoint.new(1, initialColor:Lerp(Color3.new(1, 1, 1), 0.2))
    })
    gradient.Parent = button

    -- Add glow effect
    local glow = Instance.new("ImageLabel")
    glow.Size = UDim2.new(1.2, 0, 1.2, 0)
    glow.Position = UDim2.new(-0.1, 0, -0.1, 0)
    glow.BackgroundTransparency = 1
    glow.Image = "rbxassetid://131658112"
    glow.ImageColor3 = initialColor
    glow.ImageTransparency = 0.8
    glow.ZIndex = button.ZIndex - 1
    glow.Parent = button

    -- Rounded corners or circular shape
    local corner = Instance.new("UICorner")
    if shape == "circle" then
        corner.CornerRadius = UDim.new(1, 0)
    else
        corner.CornerRadius = UDim.new(0, 12)
    end
    corner.Parent = button

    -- Hover effects
    local function onHover()
        game:GetService("TweenService"):Create(button, TweenInfo.new(0.3), {
            BackgroundColor3 = initialColor:Lerp(Color3.new(1, 1, 1), 0.2)
        }):Play()
        game:GetService("TweenService"):Create(glow, TweenInfo.new(0.3), {
            ImageTransparency = 0.6
        }):Play()
    end

    local function onUnhover()
        game:GetService("TweenService"):Create(button, TweenInfo.new(0.3), {
            BackgroundColor3 = initialColor
        }):Play()
        game:GetService("TweenService"):Create(glow, TweenInfo.new(0.3), {
            ImageTransparency = 0.8
        }):Play()
    end

    button.MouseEnter:Connect(onHover)
    button.MouseLeave:Connect(onUnhover)

    return button
end

-- Create container for buttons
local buttonContainer = Instance.new("Frame")
buttonContainer.Size = UDim2.new(0, 250, 0, 50)
buttonContainer.Position = UDim2.new(1, -260, 1, -60)
buttonContainer.BackgroundTransparency = 1
buttonContainer.Parent = screenGui

-- Create buttons with new layout
local toggleButton = createButton(buttonContainer, "On", UDim2.new(0, 0, 0, 0), UDim2.new(0, 40, 0, 40), "circle", Color3.fromRGB(0, 255, 0), Color3.fromRGB(255, 255, 255))
local upButton = createButton(buttonContainer, "▲", UDim2.new(0, 50, 0, 0), UDim2.new(0, 40, 0, 40), "circle", Color3.fromRGB(100, 100, 100), Color3.fromRGB(255, 255, 255))
local downButton = createButton(buttonContainer, "▼", UDim2.new(0, 100, 0, 0), UDim2.new(0, 40, 0, 40), "circle", Color3.fromRGB(100, 100, 100), Color3.fromRGB(255, 255, 255))
local resetButton = createButton(buttonContainer, "R", UDim2.new(0, 150, 0, 0), UDim2.new(0, 40, 0, 40), "circle", Color3.fromRGB(255, 165, 0), Color3.fromRGB(255, 255, 255))
local visibilityButton = createButton(buttonContainer, "👁", UDim2.new(0, 200, 0, 0), UDim2.new(0, 40, 0, 40), "circle", Color3.fromRGB(147, 112, 219), Color3.fromRGB(255, 255, 255))

local airwalking = true
local isVisible = false
local isMovingUp = false
local isMovingDown = false

-- Function to reset baseplate position
local function resetBaseplate()
    local character = player.Character
    if character then
        local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
        if humanoidRootPart then
            baseplate.Position = Vector3.new(
                humanoidRootPart.Position.X,
                baseplate.Position.Y,
                humanoidRootPart.Position.Z
            )
        end
    end
end

-- Function to save player from falling
local function saveFallingPlayer()
    local character = player.Character
    if character then
        local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
        if humanoidRootPart then
            baseplate.Position = Vector3.new(
                humanoidRootPart.Position.X,
                humanoidRootPart.Position.Y - 5,
                humanoidRootPart.Position.Z
            )
        end
    end
end

-- Function to toggle visibility with enhanced visuals
local function toggleVisibility()
    isVisible = not isVisible
    baseplate.Transparency = isVisible and 0.3 or 1
    
    if isVisible then
        baseplate.Material = Enum.Material.Neon
    else
        baseplate.Material = Enum.Material.SmoothPlastic
    end
end

-- Function to toggle airwalk state
local function toggleAirwalk()
    airwalking = not airwalking
    if airwalking then
        toggleButton.Text = "On"
        toggleButton.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
        if not baseplate:IsDescendantOf(workspace) then
            baseplate = createBaseplate()
        end
    else
        toggleButton.Text = "Off"
        toggleButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
        baseplate:Destroy()
    end
end

-- Continuous movement function
RunService.Heartbeat:Connect(function()
    if isMovingUp then
        baseplate.Position = baseplate.Position + Vector3.new(0, 0.5, 0)
    elseif isMovingDown then
        baseplate.Position = baseplate.Position - Vector3.new(0, 0.5, 0)
    end
end)

-- Connect button events
toggleButton.MouseButton1Click:Connect(toggleAirwalk)
resetButton.MouseButton1Click:Connect(saveFallingPlayer)
visibilityButton.MouseButton1Click:Connect(toggleVisibility)

-- Handle continuous movement
upButton.MouseButton1Down:Connect(function() isMovingUp = true end)
upButton.MouseButton1Up:Connect(function() isMovingUp = false end)
upButton.MouseLeave:Connect(function() isMovingUp = false end)

downButton.MouseButton1Down:Connect(function() isMovingDown = true end)
downButton.MouseButton1Up:Connect(function() isMovingDown = false end)
downButton.MouseLeave:Connect(function() isMovingDown = false end)

-- Smooth platform following
RunService.Heartbeat:Connect(function()
    local character = player.Character
    if character and airwalking then
        local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
        if humanoidRootPart then
            baseplate.Position = Vector3.new(
                humanoidRootPart.Position.X,
                baseplate.Position.Y,
                humanoidRootPart.Position.Z
            )
        end
    end
end)

-- Initialize
resetBaseplate()

-- Connect to character spawn
player.CharacterAdded:Connect(function(character)
    wait(0.5)
    resetBaseplate()
end)

-- Protection against GUI removal
screenGui.DescendantRemoving:Connect(function(descendant)
    if descendant == buttonContainer then
        buttonContainer.Parent = screenGui
    end
end) 
        end,
         	["!MuteNONfriends"] = function()
        -- Create ScreenGui
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "MuteToggleGui"
ScreenGui.ResetOnSpawn = false
ScreenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

-- Create the main button
local ToggleButton = Instance.new("TextButton")
ToggleButton.Name = "ToggleButton"
ToggleButton.Size = UDim2.new(0, 50, 0, 50)
ToggleButton.Position = UDim2.new(0.9, -25, 0.1, 0)
ToggleButton.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
ToggleButton.Text = "🎤"
ToggleButton.TextSize = 25
ToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
ToggleButton.BorderSizePixel = 0
ToggleButton.AutoButtonColor = true
ToggleButton.Parent = ScreenGui

-- Make it circular
local UICorner = Instance.new("UICorner")
UICorner.CornerRadius = UDim.new(1, 0)
UICorner.Parent = ToggleButton

local exceptions = {
    "Xeni_He7",
    "YournothimbuddyXD",
    "BloxiAstra"
}

local isMuted = false

local function isException(playerName)
    for _, name in pairs(exceptions) do
        if name == playerName then
            return true
        end
    end
    return false
end

-- Function to update mute status
local function updateMute()
    if isMuted then
        -- Mute non-friends who aren't exceptions
        for _, v in pairs(game:GetService("Players"):GetPlayers()) do
            local audio = v:FindFirstChild("AudioDeviceInput")
            if audio then
                if not v:IsFriendsWith(game.Players.LocalPlayer.UserId) and not isException(v.Name) and v.Name ~= game.Players.LocalPlayer.Name then
                    audio.Muted = true
                    print("is not friend")
                end
            end
        end
    else
        -- Unmute everyone
        for _, v in pairs(game:GetService("Players"):GetPlayers()) do
            local audio = v:FindFirstChild("AudioDeviceInput")
            if audio then
                audio.Muted = false
            end
        end
    end
end

-- Toggle function
ToggleButton.MouseButton1Click:Connect(function()
    isMuted = not isMuted
    
    -- Visual feedback
    if isMuted then
        ToggleButton.TextColor3 = Color3.fromRGB(255, 80, 80)
        ToggleButton.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    else
        ToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        ToggleButton.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
    end
    
    updateMute()
end)

-- Update mute when new players join (only if mute is active)
game:GetService("Players").PlayerAdded:Connect(function(player)
    wait(1) -- Wait for AudioDeviceInput to load
    if isMuted then
        local audio = player:FindFirstChild("AudioDeviceInput")
        if audio then
            if not player:IsFriendsWith(game.Players.LocalPlayer.UserId) and not isException(player.Name) and player.Name ~= game.Players.LocalPlayer.Name then
                audio.Muted = true
                print("is not friend")
            end
        end
    end
end)
       
        end,
    ["!float"] = function()
        SAHUB:EnableFloat()
    end,
    ["!unfloat"] = function()
        SAHUB:DisableFloat()
    end,
	    ["!Drehteil"] = function()
      loadstring(game:HttpGet("https://raw.githubusercontent.com/Samet123Apfl/dreh-teil/refs/heads/main/dreh%20teil"))()
     end,
     	    ["!Sneak"] = function()
     local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
local humanoid = character:WaitForChild("Humanoid")

-- Create a large second baseplate (invisible)
local secondBaseplatePosition = Vector3.new(108.033035, -6, -24.9428463)
local secondBaseplate = Instance.new("Part")
secondBaseplate.Size = Vector3.new(1024, 1, 1024)
secondBaseplate.Position = secondBaseplatePosition
secondBaseplate.Anchored = true
secondBaseplate.Name = "SecondBaseplate"
secondBaseplate.BrickColor = BrickColor.new("Medium green")
secondBaseplate.Material = Enum.Material.Grass
secondBaseplate.CanCollide = true
secondBaseplate.Transparency = 1
secondBaseplate.Parent = game.Workspace

-- Smooth surface for the baseplate
secondBaseplate.TopSurface = Enum.SurfaceType.Smooth
secondBaseplate.BottomSurface = Enum.SurfaceType.Smooth

-- Create the invisible barrier above the player
local invisibleBarrier = Instance.new("Part")
invisibleBarrier.Size = Vector3.new(1024, 5, 1024) -- thick enough to block the player
invisibleBarrier.Anchored = true
invisibleBarrier.CanCollide = true -- blocks player movement when floating down
invisibleBarrier.Transparency = 1
invisibleBarrier.Name = "InvisibleBarrier"
invisibleBarrier.Parent = game.Workspace

-- Create GUI
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "BaseplateControlGUI"
screenGui.ResetOnSpawn = false
screenGui.Parent = player:WaitForChild("PlayerGui")

-- Create a frame for GUI elements
local frame = Instance.new("Frame")
frame.Size = UDim2.new(0, 160, 0, 120)
frame.Position = UDim2.new(0.1, 0, 0.1, 0)  -- Adjust starting position for better visibility
frame.BackgroundTransparency = 0.25
frame.BackgroundColor3 = Color3.fromRGB(55, 55, 55)
frame.BorderSizePixel = 1
frame.BorderColor3 = Color3.fromRGB(45, 45, 45)
frame.Parent = screenGui

-- Add a UI corner for rounded edges
local frameCorner = Instance.new("UICorner")
frameCorner.CornerRadius = UDim.new(0, 10)
frameCorner.Parent = frame

-- Enable frame drag functionality
local UserInputService = game:GetService("UserInputService")
local dragging, dragInput, mousePos, framePos

local function updateInput(input)
    local delta = input.Position - mousePos
    frame.Position = UDim2.new(framePos.X.Scale, framePos.X.Offset + delta.X, framePos.Y.Scale, framePos.Y.Offset + delta.Y)
end

frame.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        mousePos = input.Position
        framePos = frame.Position

        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

frame.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
        dragInput = input
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if dragging and input == dragInput then
        updateInput(input)
    end
end)

-- Make professional GUI elements
local titleLabel = Instance.new("TextLabel")
titleLabel.Size = UDim2.new(0, 160, 0, 30)
titleLabel.Position = UDim2.new(0, 0, 0, 0)
titleLabel.Text = "Baseplate Control"
titleLabel.BackgroundColor3 = Color3.fromRGB(65, 65, 65)
titleLabel.TextSize = 18
titleLabel.Font = Enum.Font.SourceSansBold
titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
titleLabel.Parent = frame

local titleLabelCorner = Instance.new("UICorner")
titleLabelCorner.CornerRadius = UDim.new(0, 10)
titleLabelCorner.Parent = titleLabel

local toggleButton = Instance.new("TextButton")
toggleButton.Size = UDim2.new(0, 140, 0, 30)
toggleButton.Position = UDim2.new(0.5, -70, 0.3, 0)
toggleButton.Text = "Sneak Up"
toggleButton.BackgroundColor3 = Color3.fromRGB(75, 75, 75)
toggleButton.TextSize = 16
toggleButton.Font = Enum.Font.SourceSansBold
toggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
toggleButton.Parent = frame

local toggleButtonCorner = Instance.new("UICorner")
toggleButtonCorner.CornerRadius = UDim.new(0, 8)
toggleButtonCorner.Parent = toggleButton

local upButton = Instance.new("TextButton")
upButton.Size = UDim2.new(0, 60, 0, 30)
upButton.Position = UDim2.new(0.25, -30, 0.7, 0)
upButton.Text = "↑"
upButton.BackgroundColor3 = Color3.fromRGB(75, 75, 75)
upButton.TextSize = 20
upButton.Font = Enum.Font.SourceSansBold
upButton.TextColor3 = Color3.fromRGB(255, 255, 255)
upButton.Parent = frame

local upButtonCorner = Instance.new("UICorner")
upButtonCorner.CornerRadius = UDim.new(0, 8)
upButtonCorner.Parent = upButton

local downButton = Instance.new("TextButton")
downButton.Size = UDim2.new(0, 60, 0, 30)
downButton.Position = UDim2.new(0.75, -30, 0.7, 0)
downButton.Text = "↓"
downButton.BackgroundColor3 = Color3.fromRGB(75, 75, 75)
downButton.TextSize = 20
downButton.Font = Enum.Font.SourceSansBold
downButton.TextColor3 = Color3.fromRGB(255, 255, 255)
downButton.Parent = frame

local downButtonCorner = Instance.new("UICorner")
downButtonCorner.CornerRadius = UDim.new(0, 8)
downButtonCorner.Parent = downButton

-- Function to move the baseplate up
local function moveBaseplateUp()
    if not isFloatingUp then  -- Only move baseplate when floating down
        secondBaseplate.Position = secondBaseplate.Position + Vector3.new(0, 1, 0) -- Adjust step as needed
    end
end

-- Function to move the baseplate down
local function moveBaseplateDown()
    if not isFloatingUp then  -- Only move baseplate when floating down
        secondBaseplate.Position = secondBaseplate.Position - Vector3.new(0, 1, 0) -- Adjust step as needed
    end
end

-- Connect buttons to functions
upButton.MouseButton1Click:Connect(moveBaseplateUp)
downButton.MouseButton1Click:Connect(moveBaseplateDown)

-- Function to disable jumping while floating down
local function disableJump()
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Jumping, false)
end

-- Function to enable jumping while floating up
local function enableJump()
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Jumping, true)
end

-- Float functionality
local function clearForces()
    for _, child in pairs(humanoidRootPart:GetChildren()) do
        if child:IsA("BodyVelocity") or child:IsA("BodyGyro") or child:IsA("BodyPosition") then
            child:Destroy()
        end
    end
end

local function noclipUpdate()
    for _, part in pairs(character:GetDescendants()) do
        if part:IsA("BasePart") then
            part.CanCollide = false
        end
    end
end

local function float(up)
    noclipUpdate()
    local bodyVelocity = Instance.new("BodyVelocity")
    bodyVelocity.Velocity = Vector3.new(0, up and 2 or -2, 0)
    bodyVelocity.MaxForce = Vector3.new(0, math.huge, 0)
    bodyVelocity.Parent = humanoidRootPart
    game:GetService("Debris"):AddItem(bodyVelocity, 2)
end

local isFloatingUp = false  -- Start with "Sneak Up" (floating down initially)

-- Toggle button functionality
toggleButton.MouseButton1Click:Connect(function()
    isFloatingUp = not isFloatingUp
    if isFloatingUp then
        toggleButton.Text = "Sneak Down"  -- Change the text to "Sneak Down" when floating up
        enableJump()                      -- Enable jumping when floating up
        float(true)
        local existingBarrier = game.Workspace:FindFirstChild("InvisibleBarrier")
        if existingBarrier then
            existingBarrier:Destroy()  -- Remove invisible barrier when floating up
        end
    else
        toggleButton.Text = "Sneak Up"  -- Change text back to "Sneak Up" when floating down
        disableJump()                   -- Disable jumping when floating down
        float(false)
        if not game.Workspace:FindFirstChild("InvisibleBarrier") then
            invisibleBarrier = Instance.new("Part")
            invisibleBarrier.Size = Vector3.new(1024, 5, 1024)
            invisibleBarrier.Anchored = true
            invisibleBarrier.CanCollide = true  -- Ensure it blocks player movement when floating down
            invisibleBarrier.Transparency = 1
            invisibleBarrier.Name = "InvisibleBarrier"
            invisibleBarrier.Parent = game.Workspace
        end
    end
end)

-- Update the position of the invisible barrier above the player
game:GetService("RunService").Stepped:Connect(function()
    noclipUpdate()
    local existingBarrier = game.Workspace:FindFirstChild("InvisibleBarrier")
    if existingBarrier then
        existingBarrier.Position = humanoidRootPart.Position + Vector3.new(0, 5, 0)
    end
end)

-- Handle respawn and reapply changes with updated float function
local function onCharacterAdded(newCharacter)
    character = newCharacter
    humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    humanoid = character:WaitForChild("Humanoid")
    clearForces()
    noclipUpdate()
    if isFloatingUp then
        enableJump()
        float(true)
    else
        disableJump()
        float(false)
    end
end

-- Connect respawn event
player.CharacterAdded:Connect(onCharacterAdded)

-- Start by floating the player down (disable jumping when floating down)
disableJump()
float(false)
  end,
     ["!Jerk"] = function()
         loadstring(game:HttpGet("https://pastefy.app/YZoglOyJ/raw"))() 
     end,
          ["!ChatDraw"] = function()
 local TextChatService = game:GetService("TextChatService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local ContextActionService = game:GetService("ContextActionService")
local CoreGui = game:GetService("CoreGui")
local HttpService = game:GetService("HttpService")

local INVISIBLE_CHAR = "\u{001E}"
local NEWLINE = "\u{000D}"
local PRESET_FILE_NAME = "drawing_presets.json"

-- Create a table to store presets
local presets = {}

local function chatMessage(str)
    str = tostring(str)
    if TextChatService.ChatVersion == Enum.ChatVersion.TextChatService then
        TextChatService.TextChannels.RBXGeneral:SendAsync(str)
    else
        ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(str, "All")
    end
end

local function createButton(text, parent, size, position, backgroundColor)
    local button = Instance.new("TextButton")
    button.Text = text
    button.Size = size
    button.Position = position
    button.BackgroundColor3 = backgroundColor or Color3.fromRGB(60, 60, 60)
    button.BorderSizePixel = 0
    button.Font = Enum.Font.GothamSemibold
    button.TextSize = 14
    button.TextColor3 = Color3.fromRGB(255, 255, 255)
    button.AutoButtonColor = true
    button.Parent = parent

    -- Create rounded corners
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 6)
    corner.Parent = button

    -- Add hover effect
    local originalColor = button.BackgroundColor3
    button.MouseEnter:Connect(function()
        TweenService:Create(button, TweenInfo.new(0.3), {
            BackgroundColor3 = backgroundColor and backgroundColor:Lerp(Color3.fromRGB(255, 255, 255), 0.2) or Color3.fromRGB(80, 80, 80)
        }):Play()
    end)

    button.MouseLeave:Connect(function()
        TweenService:Create(button, TweenInfo.new(0.3), {
            BackgroundColor3 = originalColor
        }):Play()
    end)

    return button
end

local function addShadow(frame)
    local shadow = Instance.new("ImageLabel")
    shadow.Size = UDim2.new(1, 20, 1, 20)
    shadow.Position = UDim2.new(0, -10, 0, -10)
    shadow.BackgroundTransparency = 1
    shadow.Image = "rbxassetid://297774371"
    shadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
    shadow.ImageTransparency = 0.8
    shadow.ZIndex = frame.ZIndex - 1
    shadow.Parent = frame
end

local drawingGui = nil
local selectedEmoji = "❓"
local interfaceEnabled = false -- Keep track of the UI state
local savedGrid = {}  -- Table to store the grid between sessions
local actionBound = false -- Prevent double binding of ContextAction
local drawing = false


-- Function to save presets to a file
local function savePresetsToFile()
	local success, errorMessage = pcall(function()
		local jsonString = HttpService:JSONEncode(presets)
		writefile(PRESET_FILE_NAME, jsonString)
	end)
    if not success then
        warn("Error saving presets:", errorMessage)
    end
end

-- Function to load presets from a file
local function loadPresetsFromFile()
    local success, fileContent = pcall(function()
        return readfile(PRESET_FILE_NAME)
    end)
	
    if success and fileContent then
        local decodeSuccess, decodedData = pcall(function()
            return HttpService:JSONDecode(fileContent)
        end)
        
        if decodeSuccess and decodedData then
            presets = decodedData
        else
            warn("Error decoding presets: ", decodedData)
        end
    else
        warn("Error loading or reading the file:", fileContent)
    end
end

local function createDrawingInterface()
    local gui = Instance.new("ScreenGui")
    gui.Name = "DrawingInterface"
	gui.DisplayOrder = 2 -- Ensure it's on top
    gui.ResetOnSpawn = false -- Prevent reset on respawn
    gui.Parent = CoreGui

    local isTouchEnabled = UserInputService.TouchEnabled

    -- Determine scale based on platform
    local mainFrameScale = isTouchEnabled and 0.7 or 1
	
	local baseWidth = 300
	local baseHeight = 490
	local baseX = -150
	local baseY = -245

	
	local scaledWidth = baseWidth * mainFrameScale
	local scaledHeight = baseHeight * mainFrameScale
	local scaledX = baseX * mainFrameScale
	local scaledY = baseY * mainFrameScale


    local mainFrame = Instance.new("Frame")

    -- Main frame (matches dark theme in image)
    mainFrame.Size = UDim2.new(0, scaledWidth, 0, scaledHeight)  -- Increased height
    mainFrame.Position = UDim2.new(0.5, scaledX, 0.5, scaledY)
    mainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    mainFrame.BorderSizePixel = 0
    mainFrame.Parent = gui

    -- Add rounded corners to main frame
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 10 * mainFrameScale)
    corner.Parent = mainFrame

    addShadow(mainFrame)

     -- Title bar
    local titleBarHeight = 30 * mainFrameScale
    local titleBar = Instance.new("Frame")
    titleBar.Size = UDim2.new(1, 0, 0, titleBarHeight)
    titleBar.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    titleBar.BorderSizePixel = 0
    titleBar.Parent = mainFrame

    -- Add rounded corners to title bar
    local titleCorner = Instance.new("UICorner")
    titleCorner.CornerRadius = UDim.new(0, 10 * mainFrameScale)
    titleCorner.Parent = titleBar


     -- Title text
    local titleTextOffset = 10 * mainFrameScale
    local titleText = Instance.new("TextLabel")
    titleText.Text = "Drawing Interface"
    titleText.Size = UDim2.new(1, -40 * mainFrameScale, 1, 0)
    titleText.Position = UDim2.new(0, titleTextOffset, 0, 0)
    titleText.BackgroundTransparency = 1
    titleText.Font = Enum.Font.Gotham
    titleText.TextSize = 14 * mainFrameScale
    titleText.TextColor3 = Color3.fromRGB(255, 255, 255)
    titleText.TextXAlignment = Enum.TextXAlignment.Left
    titleText.Parent = titleBar

    -- Close button (red X in corner)
    local closeButtonSize = 30 * mainFrameScale
    local closeButtonOffset = -30 * mainFrameScale
    local closeButton = createButton("X", titleBar, UDim2.new(0, closeButtonSize, 0, closeButtonSize), UDim2.new(1, closeButtonOffset, 0, 0), Color3.fromRGB(220, 50, 50))
    closeButton.MouseButton1Click:Connect(function()
        gui.Enabled = false
        interfaceEnabled = false
    end)

    -- Grid setup
    local GRID_SIZE = 7
    local CELL_SIZE = 35 * mainFrameScale
    local grid = {}
    local cells = {}
	
	local gridOffsetX = -(GRID_SIZE * CELL_SIZE) / 2
	local gridOffsetY = 40 * mainFrameScale

    local gridFrame = Instance.new("Frame")
    gridFrame.Size = UDim2.new(0, GRID_SIZE * CELL_SIZE, 0, GRID_SIZE * CELL_SIZE)
    gridFrame.Position = UDim2.new(0.5, gridOffsetX, 0, gridOffsetY)  -- Positioned below title
    gridFrame.BackgroundTransparency = 1
    gridFrame.Parent = mainFrame
	
	local function updateCell(cell, i, j)
        grid[i][j] = selectedEmoji
        cell.Text = selectedEmoji
        -- Add subtle animation
        local scaleUp = TweenService:Create(cell, TweenInfo.new(0.1), {Size = UDim2.new(0, CELL_SIZE, 0, CELL_SIZE)})
        local scaleDown = TweenService:Create(cell, TweenInfo.new(0.1), {Size = UDim2.new(0, CELL_SIZE - 2 * mainFrameScale, 0, CELL_SIZE - 2 * mainFrameScale)})
        scaleUp:Play()
        scaleUp.Completed:Connect(function()
            scaleDown:Play()
        end)
	end
    -- Create grid cells
    for i = 1, GRID_SIZE do
        grid[i] = {}
        cells[i] = {}
        for j = 1, GRID_SIZE do
			local cellOffsetX = (j - 1) * CELL_SIZE + 1 * mainFrameScale
			local cellOffsetY = (i - 1) * CELL_SIZE + 1 * mainFrameScale
            local cell = createButton("", gridFrame, UDim2.new(0, CELL_SIZE - 2 * mainFrameScale, 0, CELL_SIZE - 2 * mainFrameScale), UDim2.new(0, cellOffsetX, 0, cellOffsetY), Color3.fromRGB(45, 45, 45))
            cell.Font = Enum.Font.Gotham
            cell.TextSize = 20 * mainFrameScale
            cell.Text = ""

            grid[i][j] = ""
			cells[i][j] = cell
			
			cell.InputBegan:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
					drawing = true
					updateCell(cell, i, j)
				end
			end)
			cell.InputChanged:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
					if drawing then
						updateCell(cell, i, j)
					end
				end
			end)
			cell.InputEnded:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
					drawing = false
				end
			end)
        end
    end
	

    -- Load saved grid
    if #savedGrid > 0 then
        for x = 1, GRID_SIZE do
            for y = 1, GRID_SIZE do
                grid[x][y] = savedGrid[x][y]
                gridFrame:GetChildren()[(x - 1) * GRID_SIZE + y].Text = savedGrid[x][y]
            end
        end
    end

    -- Emoji selector (with scrolling)
	local emojiScrollFrameHeight = 40 * mainFrameScale
	local emojiScrollFrameOffsetY = 295 * mainFrameScale

    local emojiScrollFrame = Instance.new("ScrollingFrame")
    emojiScrollFrame.Size = UDim2.new(0.95, 0, 0, emojiScrollFrameHeight)
    emojiScrollFrame.Position = UDim2.new(0.025, 0, 0, emojiScrollFrameOffsetY)  -- Positioned below grid
    emojiScrollFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    emojiScrollFrame.BorderSizePixel = 0
    emojiScrollFrame.ScrollBarThickness = 4 * mainFrameScale
    emojiScrollFrame.ScrollingDirection = Enum.ScrollingDirection.X
    emojiScrollFrame.Parent = mainFrame

    local emojiScrollFrameCorner = Instance.new("UICorner")
    emojiScrollFrameCorner.CornerRadius = UDim.new(0, 4 * mainFrameScale)
    emojiScrollFrameCorner.Parent = emojiScrollFrame
	
    local emojis = {"","⬜", "⬛", "🔲", "🔳", "🏮", "🔴", "🔵", "💜", "🤎", "❤️", "💛", "💚", "💙", "💖", "🧡", "🌸", "🌺", "🌻", "🌼", "🌷", "🌹", "📕", "📙", "📒", "📗", "📘", "📔", "📚", "📖", "❓", "❗", "💯", "🔥", "⭐", "✨", "🌙", "🌞", "☁️", "🌈", "🍕", "🍔", "🍟", "🍦", "🍩", "🍪", "☕", "🍺", "🍷", "🍸", "⚽", "🏀", "🏈", "⚾", "🎾", "🎮", "🎧", "🎵", "🎸", "🎻", "🎺", "🎷", "🎤", "🎨", "📷", "💡", "💻", "📱", "⏰", "🔒", "🔑", "🎁", "🎈", "🎉", "🎀", "📌", "📍", "🗺️", "✂️", "✏️", "✒️", "📝", "📖", "🔒", "🔔", "📞", "🛒", "💰", "💳", "💎", "🔨", "🔧", "🧰", "🧱", "🧲", "🧪", "🔬", "🔭", "🚑", "🚒", "🚓", "🚕", "🚗", "🚌", "🚲", "🚂", "✈️", "🚢", "🚀", "🛸", "🗿", "🚧", "🚦", "🛑", "🚫", "✅", "❌", "❓", "❗", "💯", "🔥", "⭐", "✨", "🌙", "🌞", "☁️", "🌈", "🍕", "🍔", "🍟", "🍦", "🍩", "🍪", "☕", "🍺", "🍷", "🍸", "⚽", "🏀", "🏈", "⚾", "🎾", "🎮", "🎧", "🎵", "🎸", "🎻", "🎺", "🎷", "🎤", "🎨", "📷", "💡", "💻", "📱", "⏰", "🔒", "🔑", "🎁", "🎈", "🎉", "🎀", "📌", "📍", "🗺️", "✂️", "✏️", "✒️", "📝", "📖", "🔒", "🔔", "📞", "🛒", "💰", "💳", "💎", "🔨", "🔧", "🧰", "🧱", "🧲", "🧪", "🔬", "🔭", "🚑", "🚒", "🚓", "🚕", "🚗", "🚌", "🚲", "🚂", "✈️", "🚢", "🚀", "🛸", "🗿", "🚧", "🚦", "🛑", "🚫", "✅", "❌"}
    local emojiButtons = {}

    -- Calculate total width needed for emoji buttons
    local totalWidth = #emojis * 35 * mainFrameScale
    emojiScrollFrame.CanvasSize = UDim2.new(0, totalWidth, 0, 0)
	
    for i, emoji in ipairs(emojis) do
		local emojiButtonOffsetX = (i - 1) * 35 * mainFrameScale + 5 * mainFrameScale
        local emojiButton = createButton(emoji, emojiScrollFrame, UDim2.new(0, 30 * mainFrameScale, 0, 30 * mainFrameScale), UDim2.new(0, emojiButtonOffsetX, 0, 5 * mainFrameScale), Color3.fromRGB(60, 60, 60))
        emojiButton.Font = Enum.Font.Gotham
        emojiButton.TextSize = 20 * mainFrameScale
        
        table.insert(emojiButtons, emojiButton)

        emojiButton.MouseButton1Click:Connect(function()
            selectedEmoji = emoji
            for _, btn in ipairs(emojiButtons) do
                btn.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
            end
            emojiButton.BackgroundColor3 = Color3.fromRGB(100, 200, 100)
        end)
    end

    -- Preset section
	local presetFrameHeight = 125 * mainFrameScale
    local presetFrameOffsetY = 340 * mainFrameScale
    local presetFrame = Instance.new("Frame")
    presetFrame.Size = UDim2.new(0.95, 0, 0, presetFrameHeight)
    presetFrame.Position = UDim2.new(0.025, 0, 0, presetFrameOffsetY)
    presetFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    presetFrame.BorderSizePixel = 0
    presetFrame.Parent = mainFrame

    local presetFrameCorner = Instance.new("UICorner")
    presetFrameCorner.CornerRadius = UDim.new(0, 6 * mainFrameScale)
    presetFrameCorner.Parent = presetFrame

    -- Preset input
	local presetInputHeight = 30 * mainFrameScale
	local presetInputOffsetY = 10 * mainFrameScale
	
    local presetInput = Instance.new("TextBox")
    presetInput.Size = UDim2.new(0.7, 0, 0, presetInputHeight)
    presetInput.Position = UDim2.new(0.025, 0, 0, presetInputOffsetY)
    presetInput.PlaceholderText = "Enter preset name..."
    presetInput.Text = ""
    presetInput.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
    presetInput.BorderSizePixel = 0
    presetInput.TextColor3 = Color3.fromRGB(255, 255, 255)
    presetInput.Font = Enum.Font.Gotham
    presetInput.TextSize = 14 * mainFrameScale
    presetInput.Parent = presetFrame

    local inputCorner = Instance.new("UICorner")
    inputCorner.CornerRadius = UDim.new(0, 4 * mainFrameScale)
    inputCorner.Parent = presetInput

    local savePresetButtonSize = 30 * mainFrameScale
    local savePresetButtonOffsetY = 10 * mainFrameScale
    local savePresetButton = createButton("Save", presetFrame, UDim2.new(0.225, 0, 0, savePresetButtonSize), UDim2.new(0.75, 0, 0, savePresetButtonOffsetY), Color3.fromRGB(70, 170, 70))
	
	-- Preset list
	local presetListHeight = 80 * mainFrameScale
	local presetListOffsetY = 45 * mainFrameScale
    local presetList = Instance.new("ScrollingFrame")
    presetList.Size = UDim2.new(0.95, 0, 0, presetListHeight)
    presetList.Position = UDim2.new(0.025, 0, 0, presetListOffsetY)
    presetList.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
    presetList.BorderSizePixel = 0
    presetList.ScrollBarThickness = 4 * mainFrameScale
    presetList.ScrollBarImageColor3 = Color3.fromRGB(100, 100, 100)
    presetList.ScrollBarImageTransparency = 0.5
    presetList.Parent = presetFrame

    local listCorner = Instance.new("UICorner")
    listCorner.CornerRadius = UDim.new(0, 4 * mainFrameScale)
    listCorner.Parent = presetList

    local function updatePresetList()
        for _, child in ipairs(presetList:GetChildren()) do
            if child:IsA("TextButton") then
                child:Destroy()
            end
        end

        local yOffset = 5 * mainFrameScale
        for i, presetData in ipairs(presets) do
            local name = presetData.name
            local preset = presetData.grid
            local presetButtonHeight = 25 * mainFrameScale
            local presetButton = createButton(name, presetList, UDim2.new(0.9, 0, 0, presetButtonHeight), UDim2.new(0.05, 0, 0, yOffset))

            -- Load preset
            presetButton.MouseButton1Click:Connect(function()
                for x = 1, GRID_SIZE do
                    for y = 1, GRID_SIZE do
                        grid[x][y] = preset[x][y]
                         gridFrame:GetChildren()[(x - 1) * GRID_SIZE + y].Text = preset[x][y]
                    end
                end
            end)
			
            -- Delete button
            local deleteButtonSize = 20 * mainFrameScale
            local deleteButtonOffsetX = -25 * mainFrameScale
            local deleteButtonOffsetY = 2 * mainFrameScale
            local deleteButton = createButton("X", presetButton, UDim2.new(0, deleteButtonSize, 0, deleteButtonSize), UDim2.new(1, deleteButtonOffsetX, 0, deleteButtonOffsetY), Color3.fromRGB(200, 50, 50))
            deleteButton.TextSize = 12 * mainFrameScale
            deleteButton.MouseButton1Click:Connect(function()
                table.remove(presets, i)
                updatePresetList()
                savePresetsToFile()
            end)

            yOffset = yOffset + 30 * mainFrameScale
        end

        presetList.CanvasSize = UDim2.new(0, 0, 0, yOffset)
    end
		
    savePresetButton.MouseButton1Click:Connect(function()
        local name = presetInput.Text
        if name ~= "" then
            local currentGrid = {}
            for x = 1, GRID_SIZE do
                currentGrid[x] = {}
                for y = 1, GRID_SIZE do
                    currentGrid[x][y] = grid[x][y]
                end
            end

            table.insert(presets, {name = name, grid = currentGrid})
            savePresetsToFile()
            presetInput.Text = ""
            updatePresetList()
        end
    end)

    -- Action buttons at bottom
	local actionButtonsHeight = 35 * mainFrameScale
	local actionButtonsOffsetY = 455 * mainFrameScale
	
    local actionButtons = Instance.new("Frame")
    actionButtons.Size = UDim2.new(0.95, 0, 0, actionButtonsHeight)
    actionButtons.Position = UDim2.new(0.025, 0, 0, actionButtonsOffsetY) -- Lowered action buttons
    actionButtons.BackgroundTransparency = 1
    actionButtons.Parent = mainFrame

    local sendButton = createButton("Send", actionButtons, UDim2.new(0.48, 0, 1, 0), UDim2.new(0, 0, 0, 0), Color3.fromRGB(70, 170, 70))
    sendButton.MouseButton1Click:Connect(function()
        local art = ""
        for x = 1, GRID_SIZE do
            for y = 1, GRID_SIZE do
                art = art .. (grid[x][y] ~= "" and grid[x][y] or "⬜")
            end
            if x < GRID_SIZE then
                art = art .. NEWLINE
            end
        end
        chatMessage(INVISIBLE_CHAR .. string.rep(NEWLINE, 8) .. art)
    end)

    local clearButton = createButton("Clear", actionButtons, UDim2.new(0.48, 0, 1, 0), UDim2.new(0.52, 0, 0, 0), Color3.fromRGB(170, 70, 70))
    clearButton.MouseButton1Click:Connect(function()
        for x = 1, GRID_SIZE do
            for y = 1, GRID_SIZE do
                grid[x][y] = ""
                gridFrame:GetChildren()[(x - 1) * GRID_SIZE + y].Text = ""
            end
        end
    end)

    -- Make the interface draggable
    local dragging = false
    local dragInput
    local dragStart
    local startPos

    local function update(input)
        local delta = input.Position - dragStart
        local position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)

        local tweenInfo = TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
        TweenService:Create(mainFrame, tweenInfo, {Position = position}):Play()
    end

    titleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = mainFrame.Position

            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    titleBar.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            update(input)
        end
    end)
	
	-- Save grid before the interface is disabled or reset
	gui.DescendantRemoving:Connect(function(descendant)
		if descendant == gui then
			savedGrid = {}
			for x = 1, GRID_SIZE do
				savedGrid[x] = {}
				for y = 1, GRID_SIZE do
					savedGrid[x][y] = grid[x][y]
				end
			end
		end
	end)


    -- Call updatePresetList here after the presetList has been created so it will render the list
    updatePresetList()

    return gui
end

-- Load the presets at the beginning
loadPresetsFromFile()

-- Initialize the GUI immediately when the script runs
drawingGui = createDrawingInterface()
drawingGui.Enabled = true
interfaceEnabled = true


-- Function to toggle the UI
local function toggleInterface()
    interfaceEnabled = not interfaceEnabled
    drawingGui.Enabled = interfaceEnabled
end


-- Bind the toggle action to a keypress (e.g., 'E' key)
local function actionToggle(actionName, inputState, inputObject)
    if inputState == Enum.UserInputState.Begin then
        toggleInterface()
    end
end

if not actionBound then
    ContextActionService:BindAction("ToggleDrawingUI", actionToggle, true, Enum.KeyCode.E)
    actionBound = true
end
    end,
         ["!Hug"] = function()
       local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local ANIMATION_IDS = {
    R6 = {
        "rbxassetid://225975820",
        "rbxassetid://283545583"
    },
    R15 = {
        "rbxassetid://6082224617",
        "rbxassetid://4940563117"
    }
}

local State = {
    isHugging = false,
    animations = {},
    defaultGravity = workspace.Gravity
}

local function setupAnimations()
    local character = LocalPlayer.Character
    if not character then return end
    
    local humanoid = character:FindFirstChild("Humanoid")
    if not humanoid then return end
    
    local animationIds = humanoid.RigType == Enum.HumanoidRigType.R15 and ANIMATION_IDS.R15 or ANIMATION_IDS.R6
    
    for _, anim in pairs(State.animations) do
        if anim.AnimationTrack then
            anim.AnimationTrack:Stop()
            anim.AnimationTrack:Destroy()
        end
    end
    
    State.animations = {}
    
    for _, id in ipairs(animationIds) do
        local animation = Instance.new("Animation")
        animation.AnimationId = id
        local animationTrack = humanoid:LoadAnimation(animation)
        
        -- Add TimePosition changed callback for R15
        if humanoid.RigType == Enum.HumanoidRigType.R15 then
            animationTrack.TimePosition = 0
            task.delay(0.3, function()
                if animationTrack.IsPlaying then
                    animationTrack:AdjustSpeed(0)
                end
            end)
        end
        
        table.insert(State.animations, {
            Animation = animation,
            AnimationTrack = animationTrack
        })
    end
end

local function findNearestPlayer()
    local character = LocalPlayer.Character
    if not character then return end
    
    local rootPart = character:FindFirstChild("HumanoidRootPart")
    if not rootPart then return end
    
    local nearestPlayer = nil
    local minDistance = math.huge
    
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            local targetCharacter = player.Character
            if targetCharacter then
                local targetRoot = targetCharacter:FindFirstChild("HumanoidRootPart")
                if targetRoot then
                    local distance = (rootPart.Position - targetRoot.Position).Magnitude
                    if distance < minDistance then
                        minDistance = distance
                        nearestPlayer = player
                    end
                end
            end
        end
    end
    
    return nearestPlayer
end

local function attachToTarget(rootPart, targetRootPart)
    local attachment = Instance.new("Attachment")
    attachment.Parent = rootPart
    
    local targetAttachment = Instance.new("Attachment")
    targetAttachment.CFrame = CFrame.new(0, 0, 1)
    targetAttachment.Parent = targetRootPart
    
    local alignPosition = Instance.new("AlignPosition")
    alignPosition.Attachment0 = attachment
    alignPosition.Attachment1 = targetAttachment
    alignPosition.MaxForce = 100000
    alignPosition.MaxVelocity = 500
    alignPosition.Responsiveness = 200
    alignPosition.Parent = rootPart
    
    local alignOrientation = Instance.new("AlignOrientation")
    alignOrientation.Attachment0 = attachment
    alignOrientation.Attachment1 = targetAttachment
    alignOrientation.MaxTorque = 100000
    alignOrientation.Responsiveness = 200
    alignOrientation.Parent = rootPart
end

local function cleanupAttachments()
    local character = LocalPlayer.Character
    if not character then return end
    
    local rootPart = character:FindFirstChild("HumanoidRootPart")
    if not rootPart then return end
    
    for _, child in ipairs(rootPart:GetChildren()) do
        if child:IsA("Attachment") or child:IsA("AlignPosition") or child:IsA("AlignOrientation") then
            child:Destroy()
        end
    end
end

local function toggleHug()
    State.isHugging = not State.isHugging
    
    if State.isHugging then
        workspace.Gravity = 0
        local target = findNearestPlayer()
        
        if target and target.Character then
            local character = LocalPlayer.Character
            if character then
                local rootPart = character:FindFirstChild("HumanoidRootPart")
                local targetRootPart = target.Character:FindFirstChild("HumanoidRootPart")
                
                if rootPart and targetRootPart then
                    setupAnimations()
                    for _, anim in pairs(State.animations) do
                        if anim.AnimationTrack then
                            anim.AnimationTrack:Play()
                        end
                    end
                    attachToTarget(rootPart, targetRootPart)
                end
            end
        end
    else
        workspace.Gravity = State.defaultGravity
        for _, anim in pairs(State.animations) do
            if anim.AnimationTrack then
                anim.AnimationTrack:Stop()
                anim.AnimationTrack:AdjustSpeed(1) -- Reset animation speed
            end
        end
        cleanupAttachments()
    end
end

local function setupInput()
    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if not gameProcessed and input.KeyCode == Enum.KeyCode.H then
            toggleHug()
        end
    end)
    
    if UserInputService.TouchEnabled then
        local screenGui = Instance.new("ScreenGui")
        screenGui.ResetOnSpawn = false
        screenGui.DisplayOrder = 999
        screenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")
        
        local button = Instance.new("TextButton")
        button.Size = UDim2.new(0, 60, 0, 60)
        button.Position = UDim2.new(0.95, -70, 0.2, 0)
        button.BackgroundColor3 = Color3.fromRGB(255, 182, 193)
        button.Text = "🤗"
        button.TextSize = 30
        button.Font = Enum.Font.GothamBold
        button.TextColor3 = Color3.fromRGB(255, 255, 255)
        button.AutoButtonColor = false
        button.Parent = screenGui
        
        local corner = Instance.new("UICorner")
        corner.CornerRadius = UDim.new(1, 0)
        corner.Parent = button
        
        local gradient = Instance.new("UIGradient")
        gradient.Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 182, 193)),
            ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 192, 203))
        })
        gradient.Rotation = 45
        gradient.Parent = button
        
        local function createTween(properties)
            return TweenService:Create(button, TweenInfo.new(0.3), properties)
        end
        
        button.MouseButton1Click:Connect(toggleHug)
        button.MouseEnter:Connect(function()
            createTween({Size = UDim2.new(0, 66, 0, 66)}):Play()
        end)
        button.MouseLeave:Connect(function()
            createTween({Size = UDim2.new(0, 60, 0, 60)}):Play()
        end)
    end
end

setupInput()
  end,
	 ["!clearchat"] = function()
		local TextChatService = Services.TextChatService
		local function chatMessage(str)
		str = tostring(str)
			if TextChatService.ChatVersion == Enum.ChatVersion.TextChatService then
			TextChatService.TextChannels.RBXGeneral:SendAsync(str)
			else
			Services.ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(str, "All")
			end
		end

		local blob = "\u{000D}"
		chatMessage("##".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. "[CHAT CLEARED] ")
	end,
    ["!credits"] = function()
        local TextChatService = Services.TextChatService
        local function chatMessage(str)
            str = tostring(str)
            if TextChatService.ChatVersion == Enum.ChatVersion.TextChatService then
                TextChatService.TextChannels.RBXGeneral:SendAsync(str)
            else
                Services.ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(str, "All")
            end
        end
    
        local blob = "\u{000D}"
        chatMessage("##".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. " ".. blob .. "[SA.HUB SCRIPT ON TOP] ")
    end,
        ["!AntiAll"] = function()
        

local Players = game:GetService("Players")
local Player = Players.LocalPlayer
local Character, Humanoid, RootPart
local Camera = workspace.CurrentCamera
local IsVoiding = false

-- Prevent objects from being destroyed by the void
workspace.FallenPartsDestroyHeight = math.huge * -1 -- Removes the void destruction limit

-- Create GUI Elements
local ScreenGui = Instance.new("ScreenGui")
local Button = Instance.new("TextButton")
local UICorner = Instance.new("UICorner")
local UIStroke = Instance.new("UIStroke")

ScreenGui.Parent = Player:WaitForChild("PlayerGui")
ScreenGui.Name = "VoidGui"

-- Button Setup
Button.Parent = ScreenGui
Button.Name = "VoidButton"
Button.Size = UDim2.new(0, 50, 0, 50) -- Small circle button
Button.Position = UDim2.new(1, -60, 0.5, -25) -- Middle right of the screen
Button.BackgroundColor3 = Color3.fromRGB(50, 50, 50) -- Dark gray
Button.BackgroundTransparency = 0.5 -- Semi-transparent button
Button.BorderSizePixel = 0
Button.Text = "V" -- Simple "V" for Void
Button.TextColor3 = Color3.fromRGB(255, 255, 255) -- White text
Button.Font = Enum.Font.GothamBold
Button.TextSize = 20
Button.Active = true
Button.Draggable = true -- Allows dragging on PC

-- Add Rounded Corners and Outline
UICorner.Parent = Button
UICorner.CornerRadius = UDim.new(1, 0) -- Makes the button a perfect circle

UIStroke.Parent = Button
UIStroke.Color = Color3.fromRGB(255, 255, 255) -- White border
UIStroke.Thickness = 1

-- Make it Draggable for All Devices
local dragging = false
local dragInput, dragStart, startPos

Button.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = Button.Position

        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

Button.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
        dragInput = input
    end
end)

game:GetService("UserInputService").InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        local delta = input.Position - dragStart
        Button.Position = UDim2.new(
            startPos.X.Scale,
            startPos.X.Offset + delta.X,
            startPos.Y.Scale,
            startPos.Y.Offset + delta.Y
        )
    end
end)

-- Voiding Function

-- Camera stuff
local function VoidTeleport()
    workspace.Camera.CameraType = Enum.CameraType.Fixed;

    local HRoot = game:GetService("Players").LocalPlayer.Character.Humanoid.RootPart;
    local Pos = HRoot.CFrame;
    HRoot.CFrame = Pos + Vector3.new(0, -1e3, 0);
    task.wait(.1) -- try messing with this value
    HRoot.CFrame = Pos;

    workspace.Camera.CameraType = Enum.CameraType.Custom;
end

local function VoidAndReturn()
    Character = Player.Character
    Humanoid = Character and Character:FindFirstChildWhichIsA("Humanoid")
    RootPart = Humanoid and Humanoid.RootPart

    if RootPart and Humanoid and not IsVoiding then
        IsVoiding = true

        -- Teleport yourself to the void
        VoidTeleport()

        IsVoiding = false
    end
end


-- Connect Button Click to Void Function
Button.MouseButton1Click:Connect(VoidAndReturn)
  end,
     ["!flip"] = function()
        --[[
	WARNING: Heads up! This script has not been verified by ScriptBlox. Use at your own risk!
]]
wait(5)

--[[ Info ]]--

local ver = "2.00"
local scriptname = "feFlip"


--[[ Keybinds ]]--

local FrontflipKey = Enum.KeyCode.Z
local BackflipKey = Enum.KeyCode.X
local AirjumpKey = Enum.KeyCode.C


--[[ Dependencies ]]--

local ca = game:GetService("ContextActionService")
local zeezy = game:GetService("Players").LocalPlayer
local h = 0.0174533
local antigrav


--[[ Functions ]]--

function zeezyFrontflip(act,inp,obj)
	if inp == Enum.UserInputState.Begin then
		zeezy.Character.Humanoid:ChangeState("Jumping")
		wait()
		zeezy.Character.Humanoid.Sit = true
		for i = 1,360 do 
			delay(i/720,function()
			zeezy.Character.Humanoid.Sit = true
				zeezy.Character.HumanoidRootPart.CFrame = zeezy.Character.HumanoidRootPart.CFrame * CFrame.Angles(-h,0,0)
			end)
		end
		wait(0.55)
		zeezy.Character.Humanoid.Sit = false
	end
end

function zeezyBackflip(act,inp,obj)
	if inp == Enum.UserInputState.Begin then
		zeezy.Character.Humanoid:ChangeState("Jumping")
		wait()
		zeezy.Character.Humanoid.Sit = true
		for i = 1,360 do
			delay(i/720,function()
			zeezy.Character.Humanoid.Sit = true
				zeezy.Character.HumanoidRootPart.CFrame = zeezy.Character.HumanoidRootPart.CFrame * CFrame.Angles(h,0,0)
			end)
		end
		wait(0.55)
		zeezy.Character.Humanoid.Sit = false
	end
end

function zeezyAirjump(act,inp,obj)
	if inp == Enum.UserInputState.Begin then
		zeezy.Character:FindFirstChildOfClass'Humanoid':ChangeState("Seated")
		wait()
		zeezy.Character:FindFirstChildOfClass'Humanoid':ChangeState("Jumping")	
	end
end


--[[ Binds ]]--

ca:BindAction("zeezyFrontflip",zeezyFrontflip,false,FrontflipKey)
ca:BindAction("zeezyBackflip",zeezyBackflip,false,BackflipKey)
ca:BindAction("zeezyAirjump",zeezyAirjump,false,AirjumpKey)

--[[ Load Message ]]--

print(scriptname .. " " .. ver .. " loaded successfully")
print("made by Zeezy#7203")

local notifSound = Instance.new("Sound",workspace)
notifSound.PlaybackSpeed = 1.5
notifSound.Volume = 0.15
notifSound.SoundId = "rbxassetid://170765130"
notifSound.PlayOnRemove = true
notifSound:Destroy()
game.StarterGui:SetCore("SendNotification", {Title = "feFlip", Text = "feFlip loaded successfully!", Icon = "rbxassetid://505845268", Duration = 5, Button1 = "Okay"})
     end,
}

function SAHUB:TeleportToPlayer(targetName)
    local targetPlayer = nil
    local lowerTargetName = targetName:lower()
    
    for _, player in ipairs(Services.Players:GetPlayers()) do
        if player.DisplayName:lower():sub(1,#lowerTargetName) == lowerTargetName then
             targetPlayer = player
             break
        end
    end

    if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
        local targetPos = targetPlayer.Character.HumanoidRootPart.Position + Vector3.new(0, 2, 0)
        local character = self.Player.Character
         if character and character:FindFirstChild("HumanoidRootPart") then
              character.HumanoidRootPart.CFrame = CFrame.new(targetPos)
        end
    else
       local TextChatService = Services.TextChatService
        local function chatMessage(str)
            str = tostring(str)
            if TextChatService.ChatVersion == Enum.ChatVersion.TextChatService then
                TextChatService.TextChannels.RBXGeneral:SendAsync(str)
            else
                Services.ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(str, "All")
            end
        end
           chatMessage("Player not found or not loaded yet.")
    end
end

function SAHUB:EnableFloat()
    if self.FloatPart then return end
    
    self.FloatPart = Utility.CreateInstance("Part", {
        Size = CONFIG.FLOAT.PLATFORM_SIZE,
        Anchored = true,
        CanCollide = true,
        Transparency = 1,
        Name = "FloatPart"
    })
    
    local character = self.Player.Character
    if character and character:FindFirstChild("HumanoidRootPart") then
        self.CurrentHeight = character.HumanoidRootPart.Position.Y + CONFIG.FLOAT.INITIAL_OFFSET
        self.FloatPart.Position = Vector3.new(
            character.HumanoidRootPart.Position.X,
            self.CurrentHeight,
            character.HumanoidRootPart.Position.Z
        )
    end
    
    self.FloatPart.Parent = workspace
    local heightLabel = self:CreateFloatGui()
    
    -- Height control
    self.Connections.HeightControl = Services.UserInputService.InputBegan:Connect(function(input)
        if input.KeyCode == Enum.KeyCode.Up then
            self.CurrentHeight = self.CurrentHeight + CONFIG.FLOAT.HEIGHT_CHANGE
            self:UpdateFloatHeight(heightLabel)
        elseif input.KeyCode == Enum.KeyCode.Down then
            self.CurrentHeight = self.CurrentHeight - CONFIG.FLOAT.HEIGHT_CHANGE
            self:UpdateFloatHeight(heightLabel)
        end
    end)
    
    -- Position update
    self.Connections.PositionUpdate = Services.RunService.Heartbeat:Connect(function()
        if self.FloatPart and self.Player.Character and self.Player.Character:FindFirstChild("HumanoidRootPart") then
            local pos = self.Player.Character.HumanoidRootPart.Position
            self.FloatPart.Position = Vector3.new(pos.X, self.CurrentHeight, pos.Z)
        end
    end)
end

function SAHUB:DisableFloat()
    if self.FloatPart then
        self.FloatPart:Destroy()
        self.FloatPart = nil
    end
    if self.FloatGui then
        self.FloatGui:Destroy()
        self.FloatGui = nil
    end
    
    -- Disconnect float-related connections
    for _, connection in pairs(self.Connections) do
        if connection then
            connection:Disconnect()
        end
    end
    self.Connections = {}
end

function SAHUB:UpdateFloatHeight(heightLabel)
    if self.FloatPart and heightLabel then
        heightLabel.Text = "Height: " .. tostring(math.floor(self.CurrentHeight))
    end
end

function SAHUB:SetupChatCommands()
    self.Player.Chatted:Connect(function(msg)
        msg = msg:lower()
        if msg == "!cmds" then
            self.CommandsGui.Visible = not self.CommandsGui.Visible
        else
             self:ExecuteCommand(msg)
        end
    end)
end

function SAHUB:SetupKeybind()
    Services.UserInputService.InputBegan:Connect(function(input, processed)
        if processed then return end
        if input.KeyCode == CONFIG.KEYBIND then
            self.CommandsGui.Visible = not self.CommandsGui.Visible
        end
    end)
end
-- Initialize
SAHUB:Init()


-- Dienste
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")

-- Konfiguration
local CONFIG = {
    TAG_SIZE = UDim2.new(0, 120, 0, 40),
    TAG_OFFSET = Vector3.new(0, 2.4, 0),
    MAX_DISTANCE = 1000000,
    SCALE_DISTANCE = 150,
    FADE_DURATION = 0.3,
	USE_EMOJIS = true
}

local RankColors = {
    ["SA OWNER"] = {
        primary = Color3.fromRGB(20, 20, 20),
        accent = Color3.fromRGB(255, 215, 0)
    },
	["SA MOMMY"] = {
		primary = Color3.fromRGB(20, 20, 20),
        accent = Color3.fromRGB(0, 191, 255)
	}
}

-- Funktion zur Erstellung des Spieler-Tags
local function createPlayerTag(player, rankText)
    local character = player.Character or player.CharacterAdded:Wait()
    local head = character:WaitForChild("Head", 5)
    if not head then return end

    local existingTag = head:FindFirstChild("RankTag")
    if existingTag then existingTag:Destroy() end
    
    local tag = Instance.new("BillboardGui")
    tag.Name = "RankTag"
    tag.Size = CONFIG.TAG_SIZE
    tag.StudsOffset = CONFIG.TAG_OFFSET
    tag.AlwaysOnTop = true
    tag.MaxDistance = CONFIG.MAX_DISTANCE
	tag.Parent = head

    local container = Instance.new("Frame")
    container.Size = UDim2.new(1, 0, 1, 0)
    container.BackgroundTransparency = 0.2
    container.BackgroundColor3 = RankColors[rankText].primary
    container.BorderSizePixel = 0
	container.Parent = tag
	
	local emoji = Instance.new("TextLabel")
    emoji.Size = UDim2.new(1, 0, 0.5, 0)
    emoji.Position = UDim2.new(0, 0, -0.45, 0)
    emoji.BackgroundTransparency = 1
	emoji.TextSize = 25
	emoji.TextColor3 = RankColors[rankText].accent
	emoji.Font = Enum.Font.SourceSans
	
	  -- Assign specific emojis for each rank
    if CONFIG.USE_EMOJIS then
		if rankText == "SA OWNER" then
			emoji.Text = "👑"  -- Crown for owner
		elseif rankText == "SA MOMMY" then
			emoji.Text = "💎"  -- Diamond for mommy
		end
	end
	emoji.Parent = container

    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0.2, 0)
    corner.Parent = container
	
	 local accent = Instance.new("Frame")
    accent.Size = UDim2.new(0.7, 0, 0, 2.5)
    accent.Position = UDim2.new(0.5, 0, 0, 0)
    accent.BackgroundColor3 = RankColors[rankText].accent
    accent.BorderSizePixel = 0
    accent.Parent = container

    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 2)
    corner.Parent = accent

    accent.AnchorPoint = Vector2.new(0.5, 0.5)
    accent.Position = UDim2.new(0.5, 0, 0, 0)

    local tweenInfo = TweenInfo.new(
        0.7,
        Enum.EasingStyle.Sine,
        Enum.EasingDirection.InOut,
        -1,
        true
    )

    local tween = TweenService:Create(accent, tweenInfo, {Size = UDim2.new(0.1, 0, 0, 2.5)})
    tween:Play()
	
    local rankLabel = Instance.new("TextLabel")
	rankLabel.Size = UDim2.new(1, 0, 0.6, 0)
	rankLabel.Position = UDim2.new(0, 0, 0.1, 0)
    rankLabel.BackgroundTransparency = 1
	rankLabel.Text = rankText
	rankLabel.TextColor3 = Color3.new(1, 1, 1)
	rankLabel.TextSize = 17
	rankLabel.Font = Enum.Font.SourceSansBold
    rankLabel.Parent = container
	
	local maxDistance = 50
	local minSize = 8
	local maxSize = 17
	
	 RunService.Heartbeat:Connect(function()
        local localPlayer = Players.LocalPlayer
        local localPlayerHead = localPlayer.Character and localPlayer.Character:WaitForChild("Head")
        
        if localPlayer and localPlayerHead and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local targetHumanoidRootPart = player.Character:FindFirstChild("HumanoidRootPart")
            if targetHumanoidRootPart then
                local distance = (localPlayerHead.Position - targetHumanoidRootPart.Position).Magnitude
                local newSize = math.clamp(maxSize - ((distance / maxDistance) * (maxSize - minSize)), minSize, maxSize)
                rankLabel.TextSize = newSize
            end
        end
    end)

    local userLabel = Instance.new("TextLabel")
	userLabel.Size = UDim2.new(1, 0, 0.4, 0)
	userLabel.Position = UDim2.new(0, 0, 0.6, 0)
    userLabel.BackgroundTransparency = 1
	userLabel.Text = "@" .. player.Name
	userLabel.TextColor3 = RankColors[rankText].accent
	userLabel.TextSize = 8
	userLabel.Font = Enum.Font.GothamBold
    userLabel.Parent = container
	
	local maxDistance = 50
	local playerHead = player.Character:WaitForChild("Head")
	local humanoidRootPart = player.Character:WaitForChild("HumanoidRootPart")
    
    RunService.Heartbeat:Connect(function()
       local localPlayer = Players.LocalPlayer
       local localPlayerHead = localPlayer.Character and localPlayer.Character:WaitForChild("Head")
        
       if localPlayer and localPlayerHead and player.Character and playerHead and humanoidRootPart then
          local distance = (localPlayerHead.Position - humanoidRootPart.Position).Magnitude
            
          if distance > maxDistance then
             userLabel.Visible = false
          else
             userLabel.Visible = true
          end
        end
    end)

   local connection = RunService.Heartbeat:Connect(function()
        if not (character and character:FindFirstChild("Head") and Players.LocalPlayer.Character) then return end
		
        local localCharacter = Players.LocalPlayer.Character
        local localHead = localCharacter:FindFirstChild("Head")
        if not localHead then return end
		
		local distance = (head.Position - localHead.Position).Magnitude
		local scale = math.clamp(1 - (distance / CONFIG.SCALE_DISTANCE), 0.5, 2)

		tag.Size = UDim2.new(0, CONFIG.TAG_SIZE.X.Offset * scale, 0, CONFIG.TAG_SIZE.Y.Offset * scale)
    end)
    
    tag.AncestryChanged:Connect(function(_, parent)
        if not parent then
            connection:Disconnect()
        end
    end)
end

-- Owner-Liste
local Owners = {"Robloxian74630436"}
-- SA MOMMY LIST
local SAMommy = {"Niliklop"}

-- Funktion zum Zuweisen des Tags (nur für den Owner oder SA MOMMY)
local function applyTagToPlayer(player)
    if table.find(Owners, player.Name) then
		createPlayerTag(player, "SA OWNER")
	elseif table.find(SAMommy, player.Name) then
		createPlayerTag(player, "SA MOMMY")
	end
end

-- Anwendung für vorhandene Spieler
for _, player in ipairs(Players:GetPlayers()) do
    task.spawn(function()
        applyTagToPlayer(player)
    end)
end

-- Anwendung bei neu hinzugekommenen Spielern
Players.PlayerAdded:Connect(function(player)
    task.spawn(function()
        applyTagToPlayer(player)
    end)
end)

-- API zum Testen und Refreshen der Tags
return {
    refreshTags = function()
        for _, player in pairs(Players:GetPlayers()) do
            task.spawn(function()
                applyTagToPlayer(player)
            end)
        end
    end
}


